import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:uuid/uuid.dart';
import '../../../core/navigation/app_router.dart';
import '../../../core/models/emergency_contact_model.dart';
import '../../../core/models/user_settings_model.dart';
import '../../../core/models/device_response_model.dart';
import '../../../core/services/local_storage_service.dart';
import '../../main_timeline/providers/device_status_provider.dart';
import '../../../core/services/api_service.dart';
import '../../../core/services/fcm_service.dart';
import '../../../core/utils/device_id_util.dart';
import '../../../core/providers/locale_provider.dart';
import '../../../core/providers/service_providers.dart';
import '../../settings/providers/settings_provider.dart';
import 'onboarding_provider.dart';

// Test environment flag
bool isTestEnvironment = const String.fromEnvironment('E2E_TEST') == 'true';

final onboardingProviderTest = NotifierProvider<OnboardingNotifierTest, OnboardingState>(
  OnboardingNotifierTest.new,
);

class OnboardingNotifierTest extends OnboardingNotifier {
  @override
  Future<void> completeOnboarding(BuildContext context) async {
    try {
      state = state.copyWith(isLoading: true);

      // „Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅÆ„Éê„É™„Éá„Éº„Ç∑„Éß„É≥
      if (state.nickname.trim().isEmpty) {
        throw Exception('„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅåÂÖ•Âäõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
      }
      if (state.nickname.trim().length < 2) {
        throw Exception('„Éã„ÉÉ„ÇØ„Éç„Éº„É†„ÅØ2ÊñáÂ≠ó‰ª•‰∏äÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
      }

      // Á∑äÊÄ•ÈÄ£Áµ°ÂÖà„Çí‰øùÂ≠ò
      await ref.read(localStorageServiceProvider)
          .saveEmergencyContacts(state.emergencyContacts);

      // „É¶„Éº„Ç∂„ÉºË®≠ÂÆö„Çí‰øùÂ≠ò
      final userSettings = UserSettingsModel(
        nickname: state.nickname.trim(),
        languageCode: state.selectedLanguageCode,
        emergencyContacts: state.emergencyContacts,
        heartbeatIntervalNormalMinutes: 6,
        heartbeatIntervalEmergencyMinutes: 6,
      );
      
      await ref.read(localStorageServiceProvider).saveUserSettings(userSettings);

      // „Ç™„É≥„Éú„Éº„Éá„Ç£„É≥„Ç∞ÂÆå‰∫Ü„Éï„É©„Ç∞„ÇíË®≠ÂÆö
      await ref.read(localStorageServiceProvider).setOnboardingComplete(true);

      // „ÉÜ„Çπ„ÉàÁí∞Â¢É„ÅÆÂ†¥Âêà„ÄÅFCM„Éà„Éº„ÇØ„É≥ÂèñÂæó„Çí„Çπ„Ç≠„ÉÉ„Éó
      String? fcmToken;
      if (!isTestEnvironment) {
        try {
          fcmToken = await ref.read(fcmServiceProvider).getFCMToken();
        } catch (e) {
          if (kDebugMode) {
            print('[OnboardingNotifier] FCM token retrieval failed: $e');
          }
          // FCM„Éà„Éº„ÇØ„É≥ÂèñÂæóÂ§±Êïó„ÅØÁ∂öË°åÂèØËÉΩ
        }
      } else {
        if (kDebugMode) {
          print('[OnboardingNotifier] Test environment: Skipping FCM token retrieval');
        }
        fcmToken = 'test-fcm-token';
      }

      // „Éá„Éê„Ç§„ÇπÊÉÖÂ†±„ÇíÁôªÈå≤
      String? deviceId = DeviceIdUtil.currentDeviceId;
      if (deviceId == null) {
        deviceId = await DeviceIdUtil.initializeAndGetDeviceId();
      }
      
      // DeviceCreateRequest„ÇíÁõ¥Êé•‰ΩúÊàê
      final deviceCreateRequest = DeviceCreateRequest(
        deviceId: deviceId,
        fcmToken: fcmToken ?? '',
        platform: DeviceIdUtil.getPlatform(),
        language: state.selectedLanguageCode,
        timezone: 'Asia/Tokyo',
      );

      // „ÉÜ„Çπ„ÉàÁí∞Â¢É„Åß„ÇÇAPIÂëº„Å≥Âá∫„Åó„ÇíË©¶„Åø„ÇãÔºàÂ§±Êïó„Åó„Å¶„ÇÇÁ∂öË°åÔºâ
      try {
        final apiService = ref.read(apiServiceProvider);
        await apiService.registerOrUpdateDevice(deviceCreateRequest);
      } catch (e) {
        if (kDebugMode) {
          print('[OnboardingNotifier] Device registration failed: $e');
        }
        // „Éá„Éê„Ç§„ÇπÁôªÈå≤Â§±Êïó„ÅØÁ∂öË°åÂèØËÉΩ
      }

      // „É≠„Ç±„Éº„É´„Éó„É≠„Éê„Ç§„ÉÄ„Éº„ÇíÊõ¥Êñ∞
      ref.read(localeProvider.notifier).setLocale(state.selectedLanguageCode);
      
      // Ë®≠ÂÆö„Éó„É≠„Éê„Ç§„ÉÄ„Éº„Å´Êñ∞„Åó„ÅÑË®≠ÂÆö„ÇíÈÄöÁü•
      try {
        ref.read(settingsProvider.notifier).loadInitialSettings();
      } catch (e) {
        if (kDebugMode) {
          print('[OnboardingNotifier] Settings provider update failed: $e');
        }
      }

      // „Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
      if (kDebugMode) {
        print('[OnboardingNotifier] üìç === ONBOARDING COMPLETE DEBUG ===');
        print('[OnboardingNotifier] üìç Onboarding completed at: ${DateTime.now()}');
        print('[OnboardingNotifier] üìç Device ID: $deviceId');
        print('[OnboardingNotifier] üìç User settings: nickname=${state.nickname}, language=${state.selectedLanguageCode}');
        print('[OnboardingNotifier] üìç Emergency contacts: ${state.emergencyContacts.length}');
        print('[OnboardingNotifier] üìç FCM token: ${fcmToken ?? 'none'}');
        print('[OnboardingNotifier] üìç === ONBOARDING COMPLETE DEBUG END ===');
      }
      
      // „É°„Ç§„É≥ÁîªÈù¢„Å∏ÈÅ∑Áßª
      if (context.mounted) {
        context.goNamed(AppRoutes.mainTimeline);
        if (kDebugMode) {
          print('[OnboardingNotifier] Navigation to main timeline initiated');
        }
      }
    } catch (e, stackTrace) {
      if (kDebugMode) {
        print('[OnboardingNotifier] Onboarding error: $e');
        print('[OnboardingNotifier] Stack trace: $stackTrace');
      }
      
      if (context.mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: ${e.toString()}')),
        );
      }
    } finally {
      state = state.copyWith(isLoading: false);
    }
  }
}